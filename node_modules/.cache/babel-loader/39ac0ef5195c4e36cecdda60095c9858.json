{"ast":null,"code":"var _jsxFileName = \"/home/flavio/workspace/reactjs/github_list_repository/src/pages/Dashboard/index.tsx\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { FaMoon, FaSun } from 'react-icons/fa';\nimport Toggle from 'react-toggle';\nimport { ThemeContext } from 'styled-components';\nimport api from '../../services/api';\nimport Loading from '../../components/Loading';\nimport { useTheme } from '../../hooks/theme';\nimport logo from \"../../assets/logo.svg\";\nimport { Title, Form, Repositories, Header, Error } from './styles';\n\nconst Dashboard = () => {\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const {\n    colors,\n    title\n  } = useContext(ThemeContext);\n  const {\n    toggleTheme\n  } = useTheme();\n  const [repositories, setRepositories] = useState(() => {\n    const storagedRepositories = localStorage.getItem('@GithubExplorer:repositories');\n    if (storagedRepositories) return JSON.parse(storagedRepositories);\n    return [];\n  });\n  useEffect(() => {\n    localStorage.setItem('@GithubExplorer:repositories', JSON.stringify(repositories));\n  }, [repositories]);\n\n  async function handleAddRepository(event) {\n    event.preventDefault();\n\n    if (newRepo === '') {\n      setInputError('Digite o autor/nome do repositório');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const {\n        data\n      } = await api.get(`repos/${newRepo}`);\n      setRepositories([...repositories, data]);\n      setNewRepo('');\n      setInputError('');\n    } catch (error) {\n      setInputError('Erro na busca por esse repositório');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    alt: \"Github Explorer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Toggle, {\n    checked: title === 'dark',\n    onChange: toggleTheme,\n    className: \"toggle\",\n    icons: {\n      checked: /*#__PURE__*/React.createElement(FaMoon, {\n        color: \"yellow\",\n        size: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 22\n        }\n      }),\n      unchecked: /*#__PURE__*/React.createElement(FaSun, {\n        color: \"yellow\",\n        size: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 24\n        }\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, \"Explore reposit\\xF3rios no Github\"), /*#__PURE__*/React.createElement(Form, {\n    hasError: !!inputError,\n    onSubmit: handleAddRepository,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: newRepo,\n    onChange: ({\n      target\n    }) => setNewRepo(target.value),\n    type: \"text\",\n    placeholder: \"Digite o nome do reposit\\xF3rio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"Pesquisar\")), inputError && /*#__PURE__*/React.createElement(Error, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 22\n    }\n  }, inputError), /*#__PURE__*/React.createElement(Repositories, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, !loading ? repositories.map(repository => /*#__PURE__*/React.createElement(Link, {\n    key: repository.full_name,\n    to: `repositories/${repository.full_name}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: repository.owner.avatar_url,\n    alt: repository.owner.login,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, repository.full_name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, repository.description)), /*#__PURE__*/React.createElement(FiChevronRight, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }))) : /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/flavio/workspace/reactjs/github_list_repository/src/pages/Dashboard/index.tsx"],"names":["React","useState","useEffect","useContext","Link","FiChevronRight","FaMoon","FaSun","Toggle","ThemeContext","api","Loading","useTheme","Title","Form","Repositories","Header","Error","Dashboard","newRepo","setNewRepo","inputError","setInputError","loading","setLoading","colors","title","toggleTheme","repositories","setRepositories","storagedRepositories","localStorage","getItem","JSON","parse","setItem","stringify","handleAddRepository","event","preventDefault","data","get","error","logo","checked","unchecked","target","value","map","repository","full_name","owner","avatar_url","login","description"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, FormEvent } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { FaMoon, FaSun } from 'react-icons/fa';\nimport Toggle from 'react-toggle';\nimport { ThemeContext } from 'styled-components';\n\nimport api from '../../services/api';\nimport Loading from '../../components/Loading';\nimport { useTheme } from '../../hooks/theme';\n\nimport logo from '../../assets/logo.svg';\n\nimport { Title, Form, Repositories, Header, Error } from './styles';\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const { colors, title } = useContext(ThemeContext);\n\n  const { toggleTheme } = useTheme();\n\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storagedRepositories = localStorage.getItem(\n      '@GithubExplorer:repositories'\n    );\n\n    if (storagedRepositories) return JSON.parse(storagedRepositories);\n    return [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\n      '@GithubExplorer:repositories',\n      JSON.stringify(repositories)\n    );\n  }, [repositories]);\n\n  async function handleAddRepository(\n    event: FormEvent<HTMLFormElement>\n  ): Promise<void> {\n    event.preventDefault();\n\n    if (newRepo === '') {\n      setInputError('Digite o autor/nome do repositório');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const { data } = await api.get<Repository>(`repos/${newRepo}`);\n\n      setRepositories([...repositories, data]);\n      setNewRepo('');\n      setInputError('');\n    } catch (error) {\n      setInputError('Erro na busca por esse repositório');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <>\n      <Header>\n        <img src={logo} alt=\"Github Explorer\" />\n        <Toggle\n          checked={title === 'dark'}\n          onChange={toggleTheme}\n          className=\"toggle\"\n          icons={{\n            checked: <FaMoon color=\"yellow\" size={12} />,\n            unchecked: <FaSun color=\"yellow\" size={12} />,\n          }}\n        />\n      </Header>\n      <Title>Explore repositórios no Github</Title>\n\n      <Form hasError={!!inputError} onSubmit={handleAddRepository}>\n        <input\n          value={newRepo}\n          onChange={({ target }) => setNewRepo(target.value)}\n          type=\"text\"\n          placeholder=\"Digite o nome do repositório\"\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n\n      {inputError && <Error>{inputError}</Error>}\n\n      <Repositories>\n        {!loading ? (\n          repositories.map(repository => (\n            <Link\n              key={repository.full_name}\n              to={`repositories/${repository.full_name}`}\n            >\n              <img\n                src={repository.owner.avatar_url}\n                alt={repository.owner.login}\n              />\n              <div>\n                <strong>{repository.full_name}</strong>\n                <p>{repository.description}</p>\n              </div>\n\n              <FiChevronRight size={20} />\n            </Link>\n          ))\n        ) : (\n          <Loading />\n        )}\n      </Repositories>\n    </>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}
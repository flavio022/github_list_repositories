{"ast":null,"code":"var _jsxFileName = \"/home/flavio/workspace/reactjs/github_list_repository/src/hooks/theme.tsx\";\nimport React, { createContext, useCallback, useContext } from 'react';\nimport { ThemeProvider as StyledProvider } from 'styled-components';\nimport usePersistedState from './usePersistedState';\nimport light from '../styles/themes/light';\nimport dark from '../styles/themes/dark';\nconst ThemeContext = createContext({});\n\nconst ThemeProvider = ({\n  children\n}) => {\n  const [theme, setTheme] = usePersistedState('theme', light);\n  const toggleTheme = useCallback(() => {\n    setTheme(theme.title === 'light' ? dark : light);\n  }, [theme.title, setTheme]);\n  return /*#__PURE__*/React.createElement(StyledProvider, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: {\n      toggleTheme\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, children));\n};\n\nfunction useTheme() {\n  const context = useContext(ThemeContext);\n\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n\n  return context;\n}\n\nexport { ThemeProvider, useTheme };","map":{"version":3,"sources":["/home/flavio/workspace/reactjs/github_list_repository/src/hooks/theme.tsx"],"names":["React","createContext","useCallback","useContext","ThemeProvider","StyledProvider","usePersistedState","light","dark","ThemeContext","children","theme","setTheme","toggleTheme","title","useTheme","context","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,UAA5C,QAA8D,OAA9D;AACA,SACEC,aAAa,IAAIC,cADnB,QAGO,mBAHP;AAIA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AAMA,MAAMC,YAAY,GAAGR,aAAa,CAAmB,EAAnB,CAAlC;;AAEA,MAAMG,aAAuB,GAAG,CAAC;AAAEM,EAAAA;AAAF,CAAD,KAAkB;AAChD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,iBAAiB,CAAe,OAAf,EAAwBC,KAAxB,CAA3C;AAEA,QAAMM,WAAW,GAAGX,WAAW,CAAC,MAAM;AACpCU,IAAAA,QAAQ,CAACD,KAAK,CAACG,KAAN,KAAgB,OAAhB,GAA0BN,IAA1B,GAAiCD,KAAlC,CAAR;AACD,GAF8B,EAE5B,CAACI,KAAK,CAACG,KAAP,EAAcF,QAAd,CAF4B,CAA/B;AAIA,sBACE,oBAAC,cAAD;AAAgB,IAAA,KAAK,EAAED,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEE,MAAAA;AAAF,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,QADH,CADF,CADF;AAOD,CAdD;;AAgBA,SAASK,QAAT,GAAsC;AACpC,QAAMC,OAAO,GAAGb,UAAU,CAACM,YAAD,CAA1B;;AAEA,MAAI,CAACO,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,SAAOD,OAAP;AACD;;AAED,SAASZ,aAAT,EAAwBW,QAAxB","sourcesContent":["import React, { createContext, useCallback, useContext } from 'react';\nimport {\n  ThemeProvider as StyledProvider,\n  DefaultTheme,\n} from 'styled-components';\nimport usePersistedState from './usePersistedState';\n\nimport light from '../styles/themes/light';\nimport dark from '../styles/themes/dark';\n\ninterface ThemeContextData {\n  toggleTheme(): void;\n}\n\nconst ThemeContext = createContext<ThemeContextData>({} as ThemeContextData);\n\nconst ThemeProvider: React.FC = ({ children }) => {\n  const [theme, setTheme] = usePersistedState<DefaultTheme>('theme', light);\n\n  const toggleTheme = useCallback(() => {\n    setTheme(theme.title === 'light' ? dark : light);\n  }, [theme.title, setTheme]);\n\n  return (\n    <StyledProvider theme={theme}>\n      <ThemeContext.Provider value={{ toggleTheme }}>\n        {children}\n      </ThemeContext.Provider>\n    </StyledProvider>\n  );\n};\n\nfunction useTheme(): ThemeContextData {\n  const context = useContext(ThemeContext);\n\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n\n  return context;\n}\n\nexport { ThemeProvider, useTheme };\n"]},"metadata":{},"sourceType":"module"}